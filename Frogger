import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.geom.Line2D;
import java.util.ArrayList;

import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import javax.swing.Timer;


public class Frogger extends JPanel implements KeyListener
{
	private  ArrayList<Obstacles> obs;
   private static final long serialVersionUID = 1L;
   private static final int PREF_W = 751;
   private static final int PREF_H = 801;
   private static final int DELAY = 10;
   private RenderingHints hints = new RenderingHints(
   RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
   private Font font = new Font("Cooper Black", Font.PLAIN, 25);
   private Chicken chick;
   private int x, y;
   private int count = 0;
   private int pieces = 0;
   private java.awt.Image chicky;
   private String directory= "forward.png";
   private int score;
   
   
   private TileMap map;
   
 
   public Frogger()
 
   {
	 score = 0;
	 obs = new ArrayList<Obstacles>();
      x = 352;
      y = 752;
      setBackground(Color.BLACK);
      chick = new Chicken(x, y, 3);

      
      map = new TileMap();
      populate(obs);
      
      
     
      
      addKeyListener(this);
      setFocusable(true);
      requestFocus();
      new Timer(DELAY, new ActionListener() {
         @Override
         public void actionPerformed(ActionEvent e) 
         {
        	 chicky = new ImageIcon(this.getClass().getResource(directory)).getImage();
        	 update();
            repaint();
            populate(obs);
            checkCar();
            chackLog();
            for(int i = 0; i < obs.size();i++)
            {
            	
            	chick.intersect(chick, obs.get(i));
            }
//            drawScore();
           
         }

		private void chackLog() 
		{
			// TODO Auto-generated method stub
			
		}

		private void checkCar() 
		{
			// TODO Auto-generated method stub
			for(int i =0 ; i< 12;i++)
			{
				
			}
		}
      }).start();
   }
   
   //Draw the Score
   public void drawScore(Graphics2D g2)
   {
	   g2.setColor(Color.BLACK);
	   g2.drawString("Score: "+ score, 15, 15);
	   
   }
   
  
   public  void populate(ArrayList<Obstacles> obs)
   {

	   //Car1
	    if (pieces == 0)
	   {
		   obs.add(new car1(0,650));
		   pieces++;
	   }
	   else if (pieces<3)
	   {
		   obs.add(new car1((obs.get(pieces-1).getX()-220),650));
		   pieces++;
	   }
	   //Car2
	   else if (pieces == 3)
	   {
		   obs.add(new car2(751,600));
		   pieces++;
	   }
	   else if (pieces<6)
	   {
		   obs.add(new car2((obs.get(pieces-1).getX()+220),600));
		   pieces++;
	   }
	   //Car3
	   else if (pieces == 6)
	   {
		   obs.add(new car3(0,550));
		   pieces++;
	   }
	   else if (pieces<9)
	   {
		   obs.add(new car3((obs.get(pieces-1).getX()-220),550));
		   pieces++;
	   }
	   //Car4
	   else if (pieces == 9)
	   {
		   obs.add(new car4(751,500));
		   pieces++;
	   }
	   else if (pieces<12)
	   {
		   obs.add(new car4((obs.get(pieces-1).getX()+220),500));
		   pieces++;
	   }
	   //truck
	   else if (pieces == 12)
	   {
		   obs.add(new truck(0,450));
		   pieces++;
	   }
	   else if (pieces<14)
	   {
		   obs.add(new truck((obs.get(pieces-1).getX()-280),450));
		   pieces++;
	   }
	    //Log1
	   else if(pieces==14)
	   {
		    obs.add(new log1(0,300));
		    pieces++;
	   }
	   else if (pieces<17)
	   {
		   obs.add(new log1((obs.get(pieces-1).getX()-250), 300));
		   pieces++;
	   }
	    //Log2
	   else if(pieces==17)
	   {
		    obs.add(new log2(0,250));
		    pieces++;
	   }
	   else if (pieces<19)
	   {
		   obs.add(new log2((obs.get(pieces-1).getX()-450), 250));
		   pieces++;
	   }
	  //Log3
	   else if(pieces==19)
	   {
		    obs.add(new log3(0,150));
		    pieces++;
	   }
	   else if (pieces<22)
	   {
		   obs.add(new log3((obs.get(pieces-1).getX()-250), 150));
		   pieces++;
	   }
	    //turtles 1
	      else if(pieces==22)
	      {
	          obs.add(new turtles1(751,350));
	          pieces++;
	      }
	      else if (pieces<25)
	      {
	         obs.add(new turtles1((obs.get(pieces-1).getX()-100), 350));
	         pieces++;
	      }
	    //turtles 2
	      else if(pieces==25)
	      {
	          obs.add(new turtles2(351,200));
	          pieces++;
	      }
	      else if (pieces<28)
	      {
	         obs.add(new turtles2((obs.get(pieces-1).getX()-100), 200));
	         pieces++;
	      }
	   }
	    	  
   
   
   public Dimension getPreferredSize() {
      return new Dimension(PREF_W, PREF_H);
   }

   @Override
   protected void paintComponent(Graphics g) {
      super.paintComponent(g);
      Graphics2D g2 = (Graphics2D) g;
      g2.setRenderingHints(hints);

      g.drawString("Count = " + count, 20, 20);
      g2.setFont(font);
      g2.setColor(Color.RED);
      map.draw(g2);
  

 
//      Draw obstacles
      for(Obstacles ob : obs)
      {
    	 ob.drawObstacle(g2);
      }
//      
//draw chicken
      g2.drawImage(chicky, chick.getX(), chick.getY(), 50, 50, this);
     
     
    	  
      
     
      
      g2.setColor(Color.WHITE);
      for(int i = 0; i<PREF_H;i+=50)
      {
    	  g2.draw(new Line2D.Double(0,  i, PREF_W, i));
      }
      for(int i = 0; i < PREF_W+1; i += 50)
      {
    	  g2.draw(new Line2D.Double(i, 0, i, PREF_H+1));
      }
      
   }

   public void update()
   {
      chick.update();
      chick.setImage(directory);
      
      for(int i = 0; i<obs.size(); i++)
 	 {
		 obs.get(i).move();
	 }
      count++;
   }
  
   
   public static int getPrefW() {
	return PREF_W;
}

public static int getPrefH() {
	return PREF_H;
}

@Override
   public void keyPressed(KeyEvent e)
   {
	   int key = e.getKeyCode();
	      if(key == KeyEvent.VK_LEFT && chick.getX()>50)
	        chick.setX(chick.getX()-Chicken.getChickenSpeed());
//	      directory = "sprites/chicken/left.png";
	      if(key == KeyEvent.VK_RIGHT && chick.getX()<PREF_W-50) 
	    	chick.setX(chick.getX()+Chicken.getChickenSpeed());
//	      	directory = "sprites/chicken/Right.png";
	      if(key == KeyEvent.VK_UP && chick.getY()>150)
	    	chick.setY(chick.getY()-Chicken.getChickenSpeed());
//	      directory = "sprites/chicken/forward.png";
	      if(key == KeyEvent.VK_DOWN && chick.getY()<PREF_H-50)
	    	  chick.setY(chick.getY()+Chicken.getChickenSpeed());
//	    	  directory = "sprites/chicken/Down.png";
//	      update();
   }

   @Override
   public void keyReleased(KeyEvent e)
   {
      int key = e.getKeyCode();
      if(key == KeyEvent.VK_LEFT)
	        chick.setLeft(false);
//      directory = "forward.png";
	      if(key == KeyEvent.VK_RIGHT)
	    	chick.setRight(false);
//	      directory = "forward.png";
	      if(key == KeyEvent.VK_UP)
	         chick.setUp(false);
//	      	chicky = new ImageIcon(this.getClass().getResource("forward.png")).getImage();
	      if(key == KeyEvent.VK_DOWN)
	    	 chick.setDown(false);
//	      	chicky = new ImageIcon(this.getClass().getResource("forward.png")).getImage();
 
	      update();
   }

   @Override
   public void keyTyped(KeyEvent e){
	   int key = e.getKeyCode();
//	      if(key == KeyEvent.VK_LEFT)
//	        chick.setX(chick.getX()-Chicken.getChickenSpeed());
//	      	chicky = new ImageIcon(this.getClass().getResource("left.png")).getImage();
//	      if(key == KeyEvent.VK_RIGHT)
//	    	chick.setX(chick.getX()+Chicken.getChickenSpeed());
//	      	chicky = new ImageIcon(this.getClass().getResource("Right.png")).getImage();
//	      if(key == KeyEvent.VK_UP)
//	    	chick.setY(chick.getY()-Chicken.getChickenSpeed());
//	      	chicky = new ImageIcon(this.getClass().getResource("forward.png")).getImage();
//	      if(key == KeyEvent.VK_DOWN)
//	    	chick.setY(chick.getY()+Chicken.getChickenSpeed());
   }

   private static void createAndShowGUI() {
      Frogger gamePanel = new Frogger();

      JFrame frame = new JFrame("Frame Game");
      frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
      frame.setBackground(Color.BLACK);
      frame.getContentPane().add(gamePanel);
      frame.pack();
      frame.setLocationRelativeTo(null);
      frame.setResizable(false);
      frame.setVisible(true);

   }

   public static void main(String[] args){
	   
      SwingUtilities.invokeLater(new Runnable() {
         public void run() {
            createAndShowGUI();
         }
      });
   }
}

